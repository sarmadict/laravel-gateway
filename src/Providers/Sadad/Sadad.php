<?php

namespace Sarmad\Gateway\Providers\Sadad;

use Exception;
use Illuminate\Http\Request;
use Sarmad\Gateway\AbstractProvider;
use Sarmad\Gateway\Exceptions\TransactionException;
use Sarmad\Gateway\GatewayManager;
use Sarmad\Gateway\SoapClient;
use Sarmad\Gateway\Transactions\AuthorizedTransaction;
use Sarmad\Gateway\Transactions\SettledTransaction;
use Sarmad\Gateway\Transactions\UnAuthorizedTransaction;

class Sadad extends AbstractProvider
{

    /**
     * Url of sadad gateway web service
     *
     * @var string
     */
    const SERVER_URL = 'https://sadad.shaparak.ir/services/MerchantUtility.asmx?wsdl';

    /**
     * Form generated by sadad gateway
     *
     * @var string
     */
    private $form = '';

    /**
     * Get this provider name to save on transaction table.
     * and later use that to verify and settle
     * callback request (from transaction)
     *
     * @return string
     */
    protected function getProviderName()
    {
        return GatewayManager::SADAD;
    }

    /**
     * Authorize payment request from provider's server and return
     * authorization response as AuthorizedTransaction
     * or throw an Error (most probably SoapFault)
     *
     * @param UnAuthorizedTransaction $transaction
     * @return AuthorizedTransaction
     * @throws Exception
     */
    protected function authorizeTransaction(UnAuthorizedTransaction $transaction)
    {
        $this->form = '';

        $soap = new SoapClient(self::SERVER_URL, $this->soapConfig());

        $response = $soap->PaymentUtility(
            $this->config['merchant'],
            $transaction->getAmount()->getRiyal(),
            $transaction->getId(),
            $this->config['transactionKey'],
            $this->config['terminalId'],
            $this->getCallback($transaction)
        );

        if (!isset($response['RequestKey']) || !isset($response['PaymentUtilityResult'])) {
            throw new SadadException(SadadResult::INVALID_RESPONSE_CODE, SadadResult::INVALID_RESPONSE_MESSAGE);
        }

        $this->form = $response['PaymentUtilityResult'];

        return AuthorizedTransaction::make($transaction, $response['RequestKey']);
    }

    /**
     * Redirect the user of the application to the provider's payment screen.
     *
     * @param \Sarmad\Gateway\Transactions\AuthorizedTransaction $transaction
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Illuminate\Contracts\View\View
     */
    protected function redirectToGateway(AuthorizedTransaction $transaction)
    {
        $form = $this->form;

        return $this->view('gateway::sadad-redirector')->with(compact('form'));
    }

    /**
     * Validate the settlement request to see if it has all necessary fields
     *
     * @param Request $request
     * @return bool
     */
    protected function validateSettlementRequest(Request $request)
    {
        return true;
    }

    /**
     * Verify and Settle the transaction and return
     * settlement response as SettledTransaction
     * or throw a TransactionException
     *
     * @param Request $request
     * @param AuthorizedTransaction $transaction
     * @return SettledTransaction
     * @throws TransactionException
     * @throws Exception
     */
    protected function settleTransaction(Request $request, AuthorizedTransaction $transaction)
    {
        $soap = new SoapClient(self::SERVER_URL, $this->soapConfig());

        $result = $soap->CheckRequestStatusResult(
            $transaction->getId(),
            $this->config['merchant'],
            $this->config['terminalId'],
            $this->config['transactionKey'],
            $transaction->getReferenceId(),
            $transaction->getAmount()->getRiyal()
        );

        if (empty($result) || !isset($result->AppStatusCode)) {
            throw new SadadException(SadadResult::INVALID_RESPONSE_CODE, SadadResult::INVALID_RESPONSE_MESSAGE);
        }

        $statusResult = strval($result->AppStatusCode);
        $appStatus = strtolower($result->AppStatusDescription);

        if ($statusResult == 0 && $appStatus === 'commit') {
            $trackingCode = $result->TraceNo;
            $cardNumber = $result->CustomerCardNumber;

            return new SettledTransaction($transaction, $trackingCode, $cardNumber);
        }

        throw new SadadException($statusResult, $appStatus);
    }
}
